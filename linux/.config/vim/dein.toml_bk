

# Shougo's plugin {{{
#
# unite.vim
# 他のプラグインからも使われている便利ランチャー
# 下記の設定では<C-u><C-f>と<C-u><C-u>に特にお世話になっている
# ファイルの一覧では<C-n>は下方向、<C-p>は上方向に移動する。(この操作方法のプラグインが結構ある)
# また上端の > に文字列を入力することによって絞り込み検索を行い、Enterでファイルを開くのが基本の使い方
# なお、Escを2回押すことで unite で開いたバッファを閉じるように設定している(楽)
# ※ <C- >はCtrl+いずれかのキー
[[plugins]]
repo = 'Shougo/unite.vim'
hook_source = '''
	let g:unite_enable_start_insert=1
	nmap <silent> <C-u><C-b> :<C-u>Unite buffer<CR>
	nmap <silent> <C-u><C-f> :<C-u>UniteWithBufferDir -buffer-name=files file<CR>
	nmap <silent> <C-u><C-r> :<C-u>Unite -buffer-name=register register<CR>
	nmap <silent> <C-u><C-m> :<C-u>Unite file_mru<CR>
	nmap <silent> <C-u><C-u> :<C-u>Unite buffer file_mru<CR>
	nmap <silent> <C-u><C-a> :<C-u>UniteWithBufferDir -buffer-name=files buffer file_mru bookmark file<CR>
	au FileType unite nmap <silent> <buffer> <expr> <C-j> unite#do_action('split')
	au FileType unite imap <silent> <buffer> <expr> <C-j> unite#do_action('split')
	au FileType unite nmap <silent> <buffer> <expr> <C-l> unite#do_action('vsplit')
	au FileType unite imap <silent> <buffer> <expr> <C-l> unite#do_action('vsplit')
	au FileType unite nmap <silent> <buffer> <ESC><ESC> q
	au FileType unite imap <silent> <buffer> <ESC><ESC> <ESC>q
'''

# neomru.vim
# ファイル履歴を記録してくれている unite.vim から独立した機能
# <C-u><C-u>で以前開いたファイルが表示される
[[plugins]]
repo =  'Shougo/neomru.vim'
depends = 'Shougo/unite.vim'

[[plugins]]
repo = 'Shougo/vimproc'
#build = ['windows' : 'make -f make_mingw32.mak',
#		'cygwin' : 'make -f make_cygwin.mak',
#		'mac' : 'make -f make_mac.mak',
#		'unix' : 'make -f make_unix.mak']
#hook_add = '''
# hool_post_update = '''
# 	if dein#util#_is_windows()
# 		let cmd = 'tools\\update-dll-mingw'
# 	elseif dein#util#_is_cygwin()
# 		let cmd = 'make -f make_mingw32.mak'
# 	elseif dein#util#_is_mac()
# 		let cmd = 'make -f make_mac.mak'
# 	else
# 		let cmd = 'make -f make_unix.mak'
# 	endif
# 	let g:dein#plugin.build = cmd
# '''

# "vimfiler""
# ファイルビューア
# <C-u><C-j>で縦分割で開閉できるように設定してみた
[[plugins]]
repo = 'Shougo/vimfiler'
depends = 'Shougo/unite.vim'
on_cmd = [ 'VimFilerTab', 'VimFiler', 'VimFilerExplorer', 'VimFilerBufferDir' ]
mappings = ['<Plug>(vimfiler_switch)']
explorer = 1
hook_post_source = '''
	let g:vimfiler_as_default_explorer  = 1
	let g:vimfiler_safe_mode_by_default = 0
	let g:vimfiler_data_directory       = expand('~/.vim/etc/vimfiler')
'''
# }}}


# deoplete {{{

[[plugins]]
repo = 'Shougo/deoplete.nvim'		# 補完
[[plugins]]
repo = 'zchee/deoplete-go'			# golang
[[plugins]]
repo = 'landaire/deoplete-swift'	# swift
[[plugins]]
repo = 'zchee/deoplete-clang'		# C/C++/Obj-C/Obj-C++
[[plugins]]
repo = 'carlitux/deoplete-ternjs'	# javascript
[[plugins]]
repo = 'Shougo/deoplete-rct'		# ruby
[[plugins]]
repo = 'poppyschmo/deoplete-latex'	# latex
[[plugins]]
repo = 'neomake/neomake'			# 外部コマンドを非同期実行
[[plugins]]
repo = 'rking/ag.vim'				# 行末ホワイトスペース削除
[[plugins]]
repo = 'mattn/emmet-vim'			# html,css,xml support
[[plugins]]
repo = 'fatih/vim-go'				# golang support

#}}}


# その他のプラグイン {{{


[[plugins]]
repo = 'tyru/caw.vim'				# コメントアウト強化 gciで行頭から,gcaで行末に
hook_post_source= '''
	nmap <Leader>c <Plug>(caw:i:toggle)		" \cでコメントOn/Off
	vmap <Leader>c <Plug>(caw:i:toggle)		" \cでコメントOn/Off
'''

[[plugins]]
repo = 'LeafCage/yankround.vim'		# クリップボード拡張
hook_post_source= '''
	nmap p <Plug>(yankround-p)
	nmap P <Plug>(yankround-P)
	nmap <C-p> <Plug>(yankround-prev)
	nmap <C-n> <Plug>(yankround-next)
	let g:yankround_max_history = 1000
	nnoremap <Leader><C-p> :<C-u>Denite yankround<CR>
'''


[[plugins]]
repo = 'Townk/vim-autoclose'			"括弧を自動的に閉じる

[[plugins]]
repo = 'tpope/vim-endwise'
# ifとかの終了宣言を自動で挿入


# テキストを囲みや括弧のカーソル移動機能を拡張する
[[plugins]]
repo = 'tpope/vim-surround'
[[plugins]]
repo = 'vim-scripts/matchit.zip'

# \rで編集中のファイルを実行する
[[plugins]]
repo = 'thinca/vim-quickrun'
mappings = [['n', '\r']]
on_cmd = ['quickrun']

hook_post_source = '''
let g:quickrun_config = {}
let g:quickrun_config._ = { 'runner' : 'vimproc',
	'runner/vimproc/updatetime' : 200,
	'outputter/buffer/split' : ':botright 8sp',
	'outputter' : 'multi:buffer:quickfix',
	'hook/close_buffer/enable_empty_data' : 1,
	'hook/close_buffer/enable_failure' : 1,
}
nnoremap <expr><silent> <C-c> quickrun#is_running() ? quickrun#sweep_sessions() : "\<C-c>"
'''


# HTMLのタグを一瞬で入力できる。 <C-y>nで次のタグ入力箇所に移動できたりフロントエンドの味方
[[plugins]]
repo = 'mattn/emmet-vim'
filetypes = ['html', 'html5', 'eruby', 'jsp', 'xml', 'css', 'scss', 'coffee'],
on_cmd = ['<Plug>ZenCodingExpandNormal']

hook_post_source = '''
let g:use_emmet_complete_tag = 1
let g:user_emmet_settings = {
  \ 'lang' : 'ja',
  \ 'html' : {
  \   'indentation' : '  '
  \ }}
'''

# 検索強化
[[plugins]]
repo = 'rking/ag.vim'

# 行末ホワイトスペースの削除'bronson/vim-trailing-whitespace'
[[plugins]]
repo = 'bronson/vim-trailing-whitespace'

# Go lang "
[[plugins]]
repo = 'fatih/vim-go'
hook_post_source = '''
set rtp+=$GOROOT/misc/vim
exe "set rtp+=".globpath($GOPATH, "src/github.com/nsf/gocode/vim”)")
set completeopt=menu,preview
'''

[[plugins]]
repo = 'simeji/winresizer'

[[plugins]]
repo = 	'yuratomo/w3m.vim'			# w3m



# }}}
